buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.20.1")
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}


ext {
    snippetsDir = file('build/generated-snippets')
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.palantir.docker'
apply plugin: 'jacoco'
apply plugin: "org.sonarqube"
apply plugin: "com.ewerk.gradle.plugins.querydsl"

group = 'social.alone'
version = '0.0.1'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}


dependencies {
    implementation("org.springframework.cloud:spring-cloud-aws-context:2.1.1.RELEASE")
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-hateoas')
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation('org.springframework.security:spring-security-oauth2-client')
    implementation('mysql:mysql-connector-java')
    implementation('com.h2database:h2')
    implementation('com.google.firebase:firebase-admin:6.8.0')


    compile("com.querydsl:querydsl-jpa")
    compile("com.querydsl:querydsl-apt")

    implementation('io.jsonwebtoken:jjwt:0.5.1')
    implementation('org.modelmapper:modelmapper:2.3.2')
    implementation('io.sentry:sentry-spring:1.7.16')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    testImplementation('org.springframework.restdocs:spring-restdocs-asciidoctor')
    testImplementation('org.springframework.security:spring-security-test')

    compileOnly("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

}


test {
    outputs.dir snippetsDir
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    sourceDir 'src/doc/asciidoc'
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "459648971904.dkr.ecr.ap-northeast-2.amazonaws.com/alone-social-server"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://0.0.0.0:9000"
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/*Test*.*, **/Q*.JAVA"
        property "sonar.test.inclusions", "**/*Test.groovy, **/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
    }
}

def querydslSrcDir = 'src/main/generated'
querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    querydsl.extendsFrom compileClasspath
}

