server:
  use-forward-headers: true

management:
  endpoints:
    web:
      exposure:
        include: info, health, env, mappings
  endpoint:
    health:
      show-details: always
    mappings:
      enabled: true

cloud:
  aws:
    credentials:
      instanceProfile: false
    region:
      auto: false
    stack:
      auto: false



spring:
  servlet:
    multipart:
      max-file-size: 5MB

  profiles:
    active: local

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
    properties:
      hibernate:
        format_sql: true
        use_jdbc_metadata_defaults: false # https://github.com/pgjdbc/pgjdbc/issues/1102
        jdbc.lob.non_contextual_creation: true

  hateoas:
    use-hal-as-default-json-media-type: false
  security:
    oauth2:
      client:
        registration:
          local:
            clinetId: foo
            clinetSecret: bar
          google:
            clientId: foo
            clientSecret: bar
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: foo
            clientSecret: bar
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

app:
  link:
    host: http://localhost:8080
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
  slack:
    channel: https://hooks.slack.com/services/foo/bar
  kakao:
    apiKey: 1234
    searchKeywordUrl: https://dapi.kakao.com
  facebook:
    graphUrl: https://graph.facebook.com/v3.3

logging:
  level:
    org.springframework.security: info